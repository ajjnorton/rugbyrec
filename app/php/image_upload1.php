<?php 



if ( !empty( $_FILES ) ) {
	//print_r($_FILES); //uncomment to see file array

    //get the temp location
    $tempPath = $_FILES[ 'file' ][ 'tmp_name' ];

    //get the filename
    $filename = $_FILES['file']['name'];

    // create a unique tag for the filename
    $tag = time() . rand();

    // get the file extension
    $ext = pathinfo($_FILES['file']['name'], PATHINFO_EXTENSION);

    // get the base filename
    $basename = pathinfo($_FILES['file']['name'], PATHINFO_FILENAME);

    // create a new filename incorporating the unique tag
    $new_filename = $basename . "-" . $tag . "." . $ext;
    
    
    //echo("Base name : ".$basename ."\n");
   
    //echo("Extension : ".$ext ."\n");
  
    


    //echo ("target file2 ".$targetFile."\n");

    process_image($new_filename,$tempPath,$new_filename, $ext);

    //move_uploaded_file( $tempPath, $upload_path.$filename );



} else {

    echo 'No files';

}
/**
*   function uploads an image
*   $new_filename : original file name with date stamp added
*   $tempFile : The location and name of the temp file
**/
function process_image($new_filename, $tempFile, $new_name, $ext){

    // increase the max allowable execution time incase of slow connection 
    ini_set('max_execution_time', 700);

    // view params for dubugging
    //echo("\nNew filename: ".$new_filename. " \ntemp file:".$tempFile. "  \nnew_name?:" .$new_name. "  \next:". $ext);

    // Set location up upload directory for processed large images
    $upload_img_large = $_SERVER['DOCUMENT_ROOT']."/assets/player_images/processed_large/";
    $upload_img_thumb = $_SERVER['DOCUMENT_ROOT']."/assets/player_images/processed_thumbs/";
    echo($upload_img_large);


     switch ( $ext )
            {
                case 'jpg':
                        //echo("image is jpg");
                        // generate an image resource
                        $img_resource = imagecreatefromjpeg($tempFile);

                        // use the image resource to create a image file of the correct size
                        $img_large = large_img($img_resource, $tempFile);

                        // imagejpeg() creates a JPEG file from the given image.
                        // imagejpeg (image, filename , quality )
                        //      image, An image resource, returned by one of the image creation functions
                        //      filename, The path to save the file to. If not set or NULL, the raw image stream will be outputted directly.
                        //      qualiry, quality is optional, and ranges from 0 (worst quality, smaller file) to 100 (best quality, biggest file).
                        //      Returns TRUE on success or FALSE on failure.
                        imagejpeg($img_large, $upload_img_large.$new_name, 100);

                        // THUMBNAILS
                        // use the image resource to create a image thumbnail of the correct size
                        $img_thumbnail = thumbnail_img($img_resource, $tempFile);
                        imagejpeg($img_thumbnail, $upload_img_thumb.$new_name, 100);




                        break;
                case 'jpeg':
                        
                        echo("image is jpeg");
                        break;
                case 'png':
                        
                        echo("image is png");
                        break;
                
                 default:
            }

    $answer = array( 'filename' => $new_name, 'original_filename'=>$_FILES['file']['name']);
    $json = json_encode( $answer );
    echo $json;

    imagedestroy($img_resource);
}


function large_img($img_resource, $tempFile){

    //getimagesize returns an array of file info which includes dimensions of image.
    $array_img_info = getimagesize($tempFile);
    
    // get width and height from the array generated by getimagesize
    $width = $array_img_info[0];
    $height = $array_img_info[1];


    /** Decide if we are dealing with a portrait or a landscape image and then set max size accordingly **/
    if($width>$height){
        // if the width is > height then we have a Landscape image
        // set the max width of the image
        $maxsize = 1600;
        //if the width is less than the max width then use that size.
        if($width<$maxsize){
            $maxsize=$width;
        }
    }else{
        // else we have a portrait image
        //set max height of portrait image to 800
        $maxsize=800;
        if($height<800){
            //if the height is less than the max height then use that size.
            $maxsize=$height;
        } 
    }


    /** calculate aspect ratios **/
    $widthRatio = $maxsize / $width;
    $heightRatio = $maxsize / $height;

    //set apsect ratios
    if (($widthRatio * $height) < $maxsize)
    {
        //image is landscape
        $thumbHeight = ceil($widthRatio * $height);
        $thumbWidth = $maxsize;
    }else{
        //image is portrait
        $thumbWidth = ceil($heightRatio * $width);
        $thumbHeight = $maxsize;
    }



    // create holding image
    $thumbnail = imagecreatetruecolor($thumbWidth, $thumbHeight);

    //copy sampled image into thumbnail
    //imagecopyresampled($thumbnail, $img, 0,0,0,0,$thumbWidth, $thumbHeight, $width, $height);
    
    if(!imagecopyresampled($thumbnail, $img_resource,
        0, 0, //dest x, y (margins)
        0, 0, //src x, y (0,0 means top left)
        $thumbWidth, $thumbHeight,//dest w, h (resample to this size (computed above)
        $width, $height )//src w, h (the full size of the original)
    ){
        //copy failed
        imagedestroy($thumbnail);
        return null;
    }

    //copy successful
    return $thumbnail;
}



function thumbnail_img($img_resource, $tempFile){
    //getimagesize returns an array of file info which includes dimensions of image.
    $array_img_info = getimagesize($tempFile);
    
    // get width and height from the array generated by getimagesize
    $width = $array_img_info[0];
    $height = $array_img_info[1];


    /** Decide if we are dealing with a portrait or a landscape image and then set max size accordingly **/
    if($width>$height){
        // if the width is > height then we have a Landscape image
        // set the max width of the image
        $maxsize = 640;
        //if the width is less than the max width then use that size.
        if($width<$maxsize){
            $maxsize=$width;
        }
    }else{
        // else we have a portrait image
        //set max height of portrait image to 800
        $maxsize=480;
        if($height<480){
            //if the height is less than the max height then use that size.
            $maxsize=$height;
        } 
    }


    /** calculate aspect ratios **/
    $widthRatio = $maxsize / $width;
    $heightRatio = $maxsize / $height;

    //set apsect ratios
    if (($widthRatio * $height) < $maxsize)
    {
        //image is landscape
        $thumbHeight = ceil($widthRatio * $height);
        $thumbWidth = $maxsize;
    }else{
        //image is portrait
        $thumbWidth = ceil($heightRatio * $width);
        $thumbHeight = $maxsize;
    }



    // create holding image
    $thumbnail = imagecreatetruecolor($thumbWidth, $thumbHeight);

    //copy sampled image into thumbnail
    //imagecopyresampled($thumbnail, $img, 0,0,0,0,$thumbWidth, $thumbHeight, $width, $height);
    
    if(!imagecopyresampled($thumbnail, $img_resource,
        0, 0, //dest x, y (margins)
        0, 0, //src x, y (0,0 means top left)
        $thumbWidth, $thumbHeight,//dest w, h (resample to this size (computed above)
        $width, $height )//src w, h (the full size of the original)
    ){
        //copy failed
        imagedestroy($thumbnail);
        return null;
    }

    //copy successful
    return $thumbnail;
}














?>